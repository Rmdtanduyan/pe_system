# Generated by Django 4.2.9 on 2024-03-23 12:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import profiles.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('idNumber', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=200, unique=True)),
                ('contact', models.CharField(blank=True, default='', max_length=50)),
                ('department', models.CharField(blank=True, default='', max_length=255)),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, default='public/default.png', upload_to='avatars/')),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', profiles.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassCodes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classcode', models.CharField(max_length=255)),
                ('date_joined', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('day_sched', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday')], max_length=10)),
                ('time_start', models.TimeField()),
                ('time_end', models.TimeField()),
                ('sy_start', models.IntegerField()),
                ('sy_end', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('position', models.CharField(choices=[('Office', 'Office'), ('Admin', 'Admin'), ('Department Chair', 'Department Chair'), ('Full-Time Faculty', 'Full-Time Faculty'), ('Part-Time Faculty', 'Part-Time Faculty')], max_length=300)),
            ],
            options={
                'verbose_name_plural': 'PE Department Members',
            },
        ),
        migrations.CreateModel(
            name='ClassList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classcodes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.classcodes')),
                ('students', models.ManyToManyField(related_name='user_classcode', to=settings.AUTH_USER_MODEL)),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.staff')),
            ],
        ),
    ]
